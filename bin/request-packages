#!/usr/bin/env ruby

require 'json'
require 'open-uri'
require 'parallel'


PACKAGES_URL = 'http://package.elm-lang.org/new-packages'
PACKAGES_DATA_FILE = 'src/packages.json'
POST_REQUEST_SLEEP = 0.1

# Set this in environment to have script request only a subset of all package
# `elm-package.json`s (and so complete much faster).
TEST_SCRIPT_VARIABLE = 'TEST_REQUEST_PACKAGES'


def main
  package_names = request_json(PACKAGES_URL)
  if testing_script?
    first_test_package = 'RomanErnst/updated-list'
    first_test_package_index = package_names.find_index(first_test_package)
    package_names = package_names[first_test_package_index..(first_test_package_index + 20)]
  end

  packages_map = request_packages(package_names)

  File.write(PACKAGES_DATA_FILE, JSON.pretty_generate(packages_map))
end

def testing_script?
  !!ENV[TEST_SCRIPT_VARIABLE]
end

def request_packages(package_names)
  progress_bar_options = {
    format: "%a %e %P% %c/%C %b"
  }

  Parallel.map(package_names, progress: progress_bar_options) do |package_name|
    [package_name, request_elm_package_json(package_name)].tap do
      sleep POST_REQUEST_SLEEP
    end
  end.reject do |package_name, json|
    # Reject any expected nils produced by `request_elm_package_json` for
    # package.
    !json
  end.to_h
end

def request_elm_package_json(package_name)
  # Potential `elm-package.json` (or equivalent file) URLs, in order of
  # likeliness for where it will be found. We request each in turn or raise
  # error if not found when we request the last (strictly speaking we should
  # probably only continue requesting if a request fails with a 404; this
  # probably doesn't matter much though).
  potential_elm_package_json_urls = [
    raw_github_url(package_name, 'master', 'elm-package.json'),
    raw_github_url(package_name, 'master', 'elm.json'),

    # These URLs exist solely because a single package author
    # (`github.com/spisemisu`) uses `sync` instead of `master` as their default
    # repo branch. The more correct way to handle this would be to read the
    # default branch (possibly relevant: https://stackoverflow.com/a/16501903)
    # and use this to generate other URLs to check, but this works fine for
    # now.
    raw_github_url(package_name, 'sync', 'elm-package.json'),
    raw_github_url(package_name, 'sync', 'elm.json'),
  ]

  potential_elm_package_json_urls.each do |url|
    begin
      return request_json(url)
    rescue OpenURI::HTTPError
      last_url = url == potential_elm_package_json_urls.last
      if last_url
        if repo_exists?(package_name)
          # This is the last URL to check and the package repo exists; log
          # error and abort as this is an unexpected situation we should
          # handle.
          STDERR.puts "Failing URL: #{url}"
          raise
        else
          # Repo itself does not exist, therefore we do not care as this must
          # be an invalid/unusable package. Return nil which wil be filtered
          # out in `request_packages`.
          return nil
        end
      end
    end
  end
end

def raw_github_url(package_name, branch_name, file_name)
  "https://raw.githubusercontent.com/#{package_name}/#{branch_name}/#{file_name}"
end

def repo_exists?(repo_name)
  github_url = "https://github.com/#{repo_name}"
  request(github_url)
  true
rescue OpenURI::HTTPError
  false
end

def request_json(url)
  JSON.parse(request(url))
end

def request(url)
  open(url, 'User-Agent' => 'bob.whitelock1@gmail.com').read
end

main
